{"mappings":"ACCA,MAAM,EAAwB,IAAI,cAClC,EAAsB,WAAW,CAC/B;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;AAwFA,EAAA,CAAC,CAGH,OAAM,UAAkB,YACtB,OAAO,mBAAqB,CAAE,AAC9B,cAAc,CACZ,KAAK,GACL,EAAU,kBAAkB,EAAI,EAChC,IAAI,CAAC,kBAAkB,CAAG,EAAU,kBAAkB,CACtD,IAAI,CAAC,gBAAgB,CAAG,KACxB,IAAM,EAAS,IAAI,CAAC,YAAY,CAAC,CAAE,KAAM,MAAO,GAC1C,EAAe,SAAS,aAAa,CAAC,QAC5C,CAAA,EAAa,WAAW,CAAG,EAAsB,QAAQ,CACrD,MAAM,IAAI,CAAC,EAAsB,QAAQ,EACtC,GAAG,CAAC,AAAC,GAAS,EAAK,OAAO,EAC1B,IAAI,CAAC,IACR,GAEJ,EAAO,SAAS,CAAG;A;A;AAGA,uBAAA,EAAE,EAAU,kBAAkB,CAAC;A;A;A;A;A;A;A;A;A;A;A;A;AAalD,IAAA,CAAC,CACD,EAAO,OAAO,CAAC,EACjB,CAEA,mBAAoB,CAClB,IAAM,EAAmB,IAAI,CAAC,UAAU,CAAC,aAAa,CACpD,CAAC,WAAW,EAAE,EAAU,kBAAkB,CAAA,CAAE,CAE9C,CAAA,IAAI,CAAC,gBAAgB,CAAG,EACxB,IAAM,EAAyB,EAAiB,aAAa,CAAC,UAE1D,GACF,EAAuB,gBAAgB,CAAC,QAAS,AAAC,GAAM,IAAI,CAAC,eAAe,CAAC,IAG/E,IAAI,CAAC,cAAc,EACrB,CAEA,sBAAuB,CACrB,IAAM,EAAyB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,UAE/D,GACF,EAAuB,mBAAmB,CAAC,QAAS,IAAI,CAAC,eAAe,CAE5E,CAEA,gBAAiB,CACf,IAAM,EAAiB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,oBAEvD,IAAI,CAAC,YAAY,CAAC,yBAA2B,GAC/C,CAAA,EAAe,SAAS,CAAG,IAAI,CAAC,YAAY,CAAC,uBAD/C,CAGF,CAEA,gBAAgB,CAAC,CAAE,CACjB,IAAM,EAAiB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,oBACrD,EAAW,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,UACpD,EAAa,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,gBAEnD,GAAY,IACd,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,UACvC,EAAW,KAAK,CAAC,SAAS,CACxB,iFACF,EAAe,KAAK,CAAC,SAAS,CAAG,GAE/B,CAAC,GAAY,IACf,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,UACpC,EAAW,KAAK,CAAC,SAAS,CACxB,+EACF,EAAe,KAAK,CAAC,SAAS,CAAG,CAAA,EAAG,EAAe,YAAY,CAAC,EAAE,CAAC,CAEvE,CAEA,eAAgB,CACV,IAAI,CAAC,gBAAgB,EACvB,CAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAG,CAAC,aAAa,EACpD,AAAC,CAAA,IAAI,CAAC,kBAAkB,CAAG,CAAA,EAAK,GACjC,sBAAsB,CAAC,AAAD,CAC3B,CACF,CAEA,eAAe,MAAM,CAAC,sBAAuB","sources":["<anon>","src/Components/Accordion.js"],"sourcesContent":["\"use strict\";\nconst accordionSharedStyles = new CSSStyleSheet();\naccordionSharedStyles.replaceSync(`\n  :host {\n    --accordion-animation-delay: 0.3s;\n  }\n  * {\n    font-family: var(--main-font);\n    color: var(--font-color);\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n  }\n  .accordion {\n    opacity: 0;\n  }\n  .accordion > button {\n    cursor: pointer;\n    border: unset;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    font-size: 2rem;\n    padding: 1rem;\n    border-radius: 1rem;\n    background-color: var(--neutral-color);\n    box-shadow: 0 7px var(--secondary-color);\n    transition: all var(--accordion-animation-delay) ease-in-out;\n  }\n  .accordion > button:hover {\n    filter: brightness(1.2);\n  }\n  .accordion > button > svg {\n    width: 3rem;\n    height: 3rem;\n  }\n  .accordion > button > svg > path {\n    fill: var(--font-color);\n  }\n  .accordion > .accordion-panel {\n    background-color: var(--primary-color);\n    margin: 1rem;\n    border-radius: 1rem;\n    max-height: 0;\n    overflow: hidden;\n    box-sizing: border-box;\n    transition: max-height var(--accordion-animation-delay) ease-in-out;\n  }\n  .accordion.active > button {\n    transform: translateY(5px);\n    box-shadow: 0 2px var(--secondary-color);\n  }\n  .accordion-panel-container {\n    padding: 1rem;\n  }\n\n  @keyframes accordion-active-arrow {\n    from {\n      transform: rotate(0);\n    }\n    80% {\n      transform: rotate(210deg);\n    }\n    to {\n      transform: rotate(180deg);\n    }\n  }\n  @keyframes accordion-inactive-arrow {\n    from {\n      transform: rotate(-180deg);\n    }\n    80% {\n      transform: rotate(30deg);\n    }\n    to {\n      transform: rotate(0);\n    }\n  }\n  @keyframes slideDown {\n    from {\n      transform: translateY(-3rem);\n      opacity: 0;\n    }\n    to {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n  `);\nclass Accordion extends HTMLElement {\n    static accordionIdCounter = 0;\n    constructor(){\n        super();\n        Accordion.accordionIdCounter += 1;\n        this.accordionIdCounter = Accordion.accordionIdCounter;\n        this.accordionElement = null;\n        const shadow = this.attachShadow({\n            mode: \"open\"\n        });\n        const styleElement = document.createElement(\"style\");\n        styleElement.textContent = accordionSharedStyles.cssRules ? Array.from(accordionSharedStyles.cssRules).map((rule)=>rule.cssText).join(\"\") : \"\";\n        shadow.innerHTML = `\n    <style>\n    </style>\n    <div id=\"accordion-${Accordion.accordionIdCounter}\" class=\"accordion\">\n      <button type=\"button\">\n        <div class=\"accordion-title\">NULL</div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 -960 960 960\">\n          <path d=\"m296-345-56-56 240-240 240 240-56 56-184-183-184 183Z\"/>\n        </svg>\n      </button>\n      <div class=\"accordion-panel\">\n        <div class=\"accordion-panel-container\">\n          <slot></slot>\n        </div>\n      </div>\n    </div>\n    `;\n        shadow.prepend(styleElement);\n    }\n    connectedCallback() {\n        const accordionElement = this.shadowRoot.querySelector(`#accordion-${Accordion.accordionIdCounter}`);\n        this.accordionElement = accordionElement;\n        const accordionButtonElement = accordionElement.querySelector(\"button\");\n        if (accordionButtonElement) accordionButtonElement.addEventListener(\"click\", (e)=>this.toggleAccordion(e));\n        this.updateTemplate();\n    }\n    disconnectedCallback() {\n        const accordionButtonElement = this.accordionElement.querySelector(\"button\");\n        if (accordionButtonElement) accordionButtonElement.removeEventListener(\"click\", this.toggleAccordion);\n    }\n    updateTemplate() {\n        const accordionTitle = this.accordionElement.querySelector(\".accordion-title\");\n        if (this.hasAttribute(\"data-accordion-title\") && accordionTitle) accordionTitle.innerText = this.getAttribute(\"data-accordion-title\");\n    }\n    toggleAccordion(e) {\n        const accordionPanel = this.accordionElement.querySelector(\".accordion-panel\");\n        const isActive = this.accordionElement.classList.contains(\"active\");\n        const svgElement = this.accordionElement.querySelector(\"button > svg\");\n        if (isActive && accordionPanel) {\n            this.accordionElement.classList.remove(\"active\");\n            svgElement.style.animation = \"accordion-inactive-arrow var(--accordion-animation-delay) ease-in-out forwards\";\n            accordionPanel.style.maxHeight = 0;\n        }\n        if (!isActive && accordionPanel) {\n            this.accordionElement.classList.add(\"active\");\n            svgElement.style.animation = \"accordion-active-arrow var(--accordion-animation-delay) ease-in-out forwards\";\n            accordionPanel.style.maxHeight = `${accordionPanel.scrollHeight}px`;\n        }\n    }\n    animateFadeIn() {\n        if (this.accordionElement) this.accordionElement.style.animation = `1s slideDown ${(this.accordionIdCounter - 1) * 0.3}s ease-in-out forwards`;\n    }\n}\ncustomElements.define(\"accordion-component\", Accordion);\n\n//# sourceMappingURL=index.614ffea8.js.map\n","\"use strict\";\r\nconst accordionSharedStyles = new CSSStyleSheet();\r\naccordionSharedStyles.replaceSync(\r\n  `\r\n  :host {\r\n    --accordion-animation-delay: 0.3s;\r\n  }\r\n  * {\r\n    font-family: var(--main-font);\r\n    color: var(--font-color);\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-weight: normal;\r\n  }\r\n  .accordion {\r\n    opacity: 0;\r\n  }\r\n  .accordion > button {\r\n    cursor: pointer;\r\n    border: unset;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    padding: 1rem;\r\n    border-radius: 1rem;\r\n    background-color: var(--neutral-color);\r\n    box-shadow: 0 7px var(--secondary-color);\r\n    transition: all var(--accordion-animation-delay) ease-in-out;\r\n  }\r\n  .accordion > button:hover {\r\n    filter: brightness(1.2);\r\n  }\r\n  .accordion > button > svg {\r\n    width: 3rem;\r\n    height: 3rem;\r\n  }\r\n  .accordion > button > svg > path {\r\n    fill: var(--font-color);\r\n  }\r\n  .accordion > .accordion-panel {\r\n    background-color: var(--primary-color);\r\n    margin: 1rem;\r\n    border-radius: 1rem;\r\n    max-height: 0;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    transition: max-height var(--accordion-animation-delay) ease-in-out;\r\n  }\r\n  .accordion.active > button {\r\n    transform: translateY(5px);\r\n    box-shadow: 0 2px var(--secondary-color);\r\n  }\r\n  .accordion-panel-container {\r\n    padding: 1rem;\r\n  }\r\n\r\n  @keyframes accordion-active-arrow {\r\n    from {\r\n      transform: rotate(0);\r\n    }\r\n    80% {\r\n      transform: rotate(210deg);\r\n    }\r\n    to {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n  @keyframes accordion-inactive-arrow {\r\n    from {\r\n      transform: rotate(-180deg);\r\n    }\r\n    80% {\r\n      transform: rotate(30deg);\r\n    }\r\n    to {\r\n      transform: rotate(0);\r\n    }\r\n  }\r\n  @keyframes slideDown {\r\n    from {\r\n      transform: translateY(-3rem);\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      transform: translateY(0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n  `\r\n);\r\n\r\nclass Accordion extends HTMLElement {\r\n  static accordionIdCounter = 0;\r\n  constructor() {\r\n    super();\r\n    Accordion.accordionIdCounter += 1;\r\n    this.accordionIdCounter = Accordion.accordionIdCounter;\r\n    this.accordionElement = null;\r\n    const shadow = this.attachShadow({ mode: \"open\" });\r\n    const styleElement = document.createElement(\"style\");\r\n    styleElement.textContent = accordionSharedStyles.cssRules\r\n      ? Array.from(accordionSharedStyles.cssRules)\r\n          .map((rule) => rule.cssText)\r\n          .join(\"\")\r\n      : \"\";\r\n\r\n    shadow.innerHTML = `\r\n    <style>\r\n    </style>\r\n    <div id=\"accordion-${Accordion.accordionIdCounter}\" class=\"accordion\">\r\n      <button type=\"button\">\r\n        <div class=\"accordion-title\">NULL</div>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 -960 960 960\">\r\n          <path d=\"m296-345-56-56 240-240 240 240-56 56-184-183-184 183Z\"/>\r\n        </svg>\r\n      </button>\r\n      <div class=\"accordion-panel\">\r\n        <div class=\"accordion-panel-container\">\r\n          <slot></slot>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    `;\r\n    shadow.prepend(styleElement);\r\n  }\r\n\r\n  connectedCallback() {\r\n    const accordionElement = this.shadowRoot.querySelector(\r\n      `#accordion-${Accordion.accordionIdCounter}`\r\n    );\r\n    this.accordionElement = accordionElement;\r\n    const accordionButtonElement = accordionElement.querySelector(\"button\");\r\n\r\n    if (accordionButtonElement) {\r\n      accordionButtonElement.addEventListener(\"click\", (e) => this.toggleAccordion(e));\r\n    }\r\n\r\n    this.updateTemplate();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    const accordionButtonElement = this.accordionElement.querySelector(\"button\");\r\n\r\n    if (accordionButtonElement) {\r\n      accordionButtonElement.removeEventListener(\"click\", this.toggleAccordion);\r\n    }\r\n  }\r\n\r\n  updateTemplate() {\r\n    const accordionTitle = this.accordionElement.querySelector(\".accordion-title\");\r\n\r\n    if (this.hasAttribute(\"data-accordion-title\") && accordionTitle) {\r\n      accordionTitle.innerText = this.getAttribute(\"data-accordion-title\");\r\n    }\r\n  }\r\n\r\n  toggleAccordion(e) {\r\n    const accordionPanel = this.accordionElement.querySelector(\".accordion-panel\");\r\n    const isActive = this.accordionElement.classList.contains(\"active\");\r\n    const svgElement = this.accordionElement.querySelector(\"button > svg\");\r\n\r\n    if (isActive && accordionPanel) {\r\n      this.accordionElement.classList.remove(\"active\");\r\n      svgElement.style.animation =\r\n        \"accordion-inactive-arrow var(--accordion-animation-delay) ease-in-out forwards\";\r\n      accordionPanel.style.maxHeight = 0;\r\n    }\r\n    if (!isActive && accordionPanel) {\r\n      this.accordionElement.classList.add(\"active\");\r\n      svgElement.style.animation =\r\n        \"accordion-active-arrow var(--accordion-animation-delay) ease-in-out forwards\";\r\n      accordionPanel.style.maxHeight = `${accordionPanel.scrollHeight}px`;\r\n    }\r\n  }\r\n\r\n  animateFadeIn() {\r\n    if (this.accordionElement)\r\n      this.accordionElement.style.animation = `1s slideDown ${\r\n        (this.accordionIdCounter - 1) * 0.3\r\n      }s ease-in-out forwards`;\r\n  }\r\n}\r\n\r\ncustomElements.define(\"accordion-component\", Accordion);\r\n"],"names":["accordionSharedStyles","CSSStyleSheet","replaceSync","Accordion","HTMLElement","accordionIdCounter","constructor","accordionElement","shadow","attachShadow","mode","styleElement","document","createElement","textContent","cssRules","Array","from","map","rule","cssText","join","innerHTML","prepend","connectedCallback","shadowRoot","querySelector","accordionButtonElement","addEventListener","e","toggleAccordion","updateTemplate","disconnectedCallback","removeEventListener","accordionTitle","hasAttribute","innerText","getAttribute","accordionPanel","isActive","classList","contains","svgElement","remove","style","animation","maxHeight","add","scrollHeight","animateFadeIn","customElements","define"],"version":3,"file":"index.614ffea8.js.map"}